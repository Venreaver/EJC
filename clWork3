package les13;

import java.io.IOException;

public class CarrotDinner {
    public volatile static boolean isEating = true;

    public static void main(String[] args) {
        new ThreadFlagStopEating().start();
        new ThreadFlagEating().start();
    }

    public static class ThreadFlagStopEating extends Thread {
        @Override
        public void run() {
            try {
                int k = System.in.read();
            } catch (IOException e) {
                e.printStackTrace();
            }

            isEating = false;
            System.err.println("isEating is false");
        }
    }

    public static class ThreadFlagEating extends Thread {
        @Override
        public void run() {
            System.err.println("Start dinner");
            while (isEating) {
                System.err.println("Rabbit is eating Carrot");
            }

            System.err.println("Dinner is canceled");
        }
    }
}





package les13;

public class JamonShop {
    private static int cash = 500;
    private static int jamonPrice = 100;

    public static void main(String[] args) {
        buyJamon(7, "Murzik");
    }

    private static void buyJamon(int amount, String name) {
        for (int i = 0; i < amount; i++) {
            if (cash >= jamonPrice) {
                new Thread(() -> {
                    buyOneJamon();
                }).start();
            }
        }
    }

    private static synchronized void buyOneJamon() {
        if (cash >= jamonPrice) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            cash -= jamonPrice;
            System.err.println("Done. Our cash is " + cash);
        } else {
            System.err.println("Not enough money");
        }
    }
}
